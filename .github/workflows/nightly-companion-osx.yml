name: Nightly - MacOSX Companion

on:
  workflow_run:
    workflows: ["Nightly - Companion"]
    types:
      - completed

  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '5.12.9'
          setup-python: 'false'

      - name: Install dependencies
        run: python -m pip install --upgrade pip Pillow

      - name: Install ARM toolchain
        uses: fiam/arm-none-eabi-gcc@v1
        with:
          release: '6-2017-q2'

      - name: Install dfu-util
        run: wget https://downloads.sourceforge.net/project/dfu-util/dfu-util-0.9.tar.gz &&
          tar xfv dfu-util-0.9.tar.gz &&
          cd dfu-util-0.9 &&
          ./configure &&
          make install

      - name: Install libusb
        run: wget https://github.com/libusb/libusb/releases/download/v1.0.20/libusb-1.0.20.tar.bz2 &&
          export MACOSX_DEPLOYMENT_TARGET=10.9 &&
          tar xfv libusb-1.0.20.tar.bz2 &&
          cd libusb-1.0.20 &&
          ./configure &&
          make install &&
          cd ..

      - name: Install libsdl
        run: wget https://www.libsdl.org/release/SDL-1.2.15.tar.gz &&
          tar xfv SDL-1.2.15.tar.gz &&
          export MACOSX_DEPLOYMENT_TARGET=10.9 &&
          cd SDL-1.2.15 &&
          wget 'https://bugzilla-attachments.libsdl.org/attachment.cgi?id=1320' -O patch1 &&
          wget 'https://bugzilla-attachments.libsdl.org/attachment.cgi?id=1324' -O patch2 &&
          wget 'https://hg.libsdl.org/SDL/raw-rev/91ad7b43317a' -O patch3 &&
          patch -p1 < patch1 &&
          patch -p1 < patch2 &&
          patch -p1 < patch3 &&
          ./configure --without-x &&
          make install

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_OSX_DEPLOYMENT_TARGET='10.9'

      - name: Build
        working-directory: ${{github.workspace}}
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: mkdir ${{github.workspace}}/output && tools/build-companion-nightly.sh ${{github.workspace}}  ${{github.workspace}}/output/

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: companion-nightly
          path: ${{github.workspace}}/output
          retention-days: 1

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4.1.7
        with:
          name: companion-nightly
          
      - name: Display structure of downloaded files
        run: ls -R
  
      - uses: pyTooling/Actions/releaser@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'nightly'
          files: opentx-companion*.*
